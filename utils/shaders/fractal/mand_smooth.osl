struct Complex {
   float real;
   float imag;
};

Complex sum(Complex a, Complex b) {
    return Complex(a.real + b.real, a.imag + b.imag);
}

Complex mul(Complex a, Complex b) {
    return Complex(a.real*b.real - a.imag*b.imag, a.real*b.imag + a.imag*b.real);
}

float abs(Complex a) {
    return a.real*a.real + a.imag*a.imag;
}

shader MandSmooth(
    vector Position = vector(0, 0, 0),
    float seed_x = 0,
    float seed_y = 0,
    output float inside = 1,
    output float dist = 1)
{

    float x = Position[0];
    float y = Position[1];
    Complex c = Complex(x,y);
    Complex z = Complex(x,y);
    Complex dz = Complex(0,0);
    Complex one = Complex(1,0);
    Complex two = Complex(2,0);
    Complex temp = z;

    inside = 1;

    for (int i = 0; i < 16; i++) {
        temp = sum(mul(z,z),c);
        dz = sum(mul(two,mul(z,dz)),one);
        z = temp;
        if ( abs(z) > 3200000000000000.0 ) { inside = 0; break; }
    }

    dist = abs(z) * log(abs(z)) / abs(dz);
}